
<%- include("./header") %>
    <script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script>
    <script src="https://unpkg.com/jszip@3.10.1/dist/jszip.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css" type="text/css" />
    <div class="z-index-1000 dashboard-top">
    <div>
	<h2 style="margin:0;">
        <%= user.username %>'s Files: /{{ cleanPath }}
    </h2>
    <small><a href="https://{{user.username}}.{{suffix}}/{{cleanPath}}" target="_blank">{{user.username}}.{{suffix}}/{{cleanPath}}</a></small>
    </div>
    <p id="upload-file-name">Not Uploading Anything</p>
	</div>
    <span class="z-index-1000">
        <form action="/dashboard/create" class="dashboard-submit" method="POST" style="z-index: 1000000;">
            <input type="text" name="dir" placeholder="New filename/foldername" required>
            <input type="hidden" id="cleanPath" name="cleanPath" value="{{cleanPath}}">
            <button type="submit">Create</button>
        </form>
    </span>
    <br>
    <div class="dashboard-container">
        <% if (!dashboard) { %>
            <div class="dashboard-icon">
                <a class="hidden-link dashboard-hidden-link" href="?dir={{past}}">
                    <img class="folder" src="/icons/back-small.webp"></img>
                </a>
                ../
            </div>
            <% } %>
                <% for (const file of files) { %>
                    <div class="dashboard-icon">
                        <% if (!file.isDirectory) { %>
							<% if (file.openable) { %>
                                <a class="hidden-link dashboard-hidden-link" href="{{url}}/editor/?file={{file.cleanPath}}">
  	                                <img class="document" src="/icons/document-small.webp" alt="Document">
                               	</a>
                            <% } else { %>
                            <span class="dashboard-hidden-link">
                                <img class="document" src="/icons/{{ file.kind }}-small.webp" alt="Document">
							</span>
                            <% } %>
                        <% } else { %>
                         	<a class="hidden-link dashboard-hidden-link" href="?dir={{file.cleanPath}}">
                               <img class="folder" src="/icons/folder-small.webp" alt="Folder"></img>
                            </a>
                        <% } %>
                    
                        <a class="hidden-link" href="{{url}}/dashboard/remove/?dir={{file.cleanPath}}">
                            <button class="dashboard-close">X</button>
                        </a>
                    
                        <form method="POST" action="/dashboard/editName" class="dashboard-rename-form hidden" id="{{file.id}}">
                            <input type="hidden" name="isDirectory" value="{{file.isDirectory}}">
                            <input type="text" name="newName" value="{{file.name}}">
                            <input type="hidden" name="path" value="{{file.filePath}}">
                            <input type="hidden" name="cleanPath" value="{{file.cleanPath}}">
                            <button type="submit" class="dashboard-rename">R</button>
                        </form>
                    </div>
                    <% } %>
                        <form action="/dashboard/zip-upload?dir={{ cleanPath }}"
                            class="dropzone floating-center background-none" id="my-awesome-dropzone" method="POST"
                            enctype="multipart/form-data">
								<div class="dz-message" data-dz-message><span>Drop your silly files in here!</span></div>
                            </form>
								
<script>
	var uploadFileName = document.getElementById("upload-file-name");
    Dropzone.options.myAwesomeDropzone = {
        paramName: "zipFile", // Match the field name multer is expecting
        webkitRelativePath: true,
        createImageThumbnails: false,
        disablePreviews: true,
        clickable: false,
        method: "post",
        uploadMultiple: true,
        autoProcessQueue: true,
        forceFallback: false,        
        init: function () {
            const dz = this;

            // Listen for the addedfile event
            dz.on("addedfile", function (file) {
                console.log('File added:', file);
                uploadFileName.innerText = `Uploading ${file.name}.`
            });

            // Listen for the complete event
            dz.on("complete", async function () {
                // Create a new zip instance
                const zip = new JSZip();
                const files = dz.getAcceptedFiles();

                // Add files to zip using relative path if available
                for (const file of files) {
                    const relativePath = file.webkitRelativePath || file.name;
                    zip.file(relativePath, file); // Add file to ZIP
                }

                try {
                    // Generate zip blob
                    const zipBlob = await zip.generateAsync({ type: "blob" });

                    // Log for debugging purposes
                    console.log('Generated zipBlob:', zipBlob);

                    // Prepare FormData
                    const formData = new FormData();
                    formData.append('zipFile', new File([zipBlob], 'folder.zip'));

                    // Send the zip file to the server
                    const response = await fetch('/dashboard/zip-upload?dir='+document.getElementById('cleanPath').value, {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.text();
                    console.log(result);
                    uploadFileName.innerText = `File Uploaded Successfully, ${this.getQueuedFiles().length} to go.`
                } catch (error) {
                	uploadFileName.innerText = "Error uploading files :P"
                    console.error('Error generating or uploading zip:', error);
                }
                if (this.getQueuedFiles().length === 0 && this.getUploadingFiles().length === 0) {
                   		window.location.reload();
                }
            });

            // Start processing the queue when user selects files
            dz.on("queuecomplete", function() {
                dz.processQueue(); // Automatically start the queue
            });
		}
    };
</script>
    </div>
    <%- include("./footer") %>

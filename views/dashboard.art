
<%- include("./header") %>
    <script src="https://unpkg.com/dropzone@5/dist/min/dropzone.min.js"></script>
    <script src="https://unpkg.com/jszip@3.10.1/dist/jszip.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/dropzone@5/dist/min/dropzone.min.css" type="text/css" />
    <div class="z-index-1000 dashboard-top">
    <div>
	<h2 style="margin:0;">
        <%= user.username %>'s Files: /{{ cleanPath }}
    </h2>
    <small><a href="https://{{user.username}}.{{suffix}}/{{cleanPath}}" target="_blank">{{user.username}}.{{suffix}}/{{cleanPath}}</a></small>
    <span class="z-index-1000">
            <form action="/dashboard/create" class="dashboard-submit" method="POST" style="z-index: 1000000;">
                <input type="text" name="dir" placeholder="New filename/foldername" required>
                <input type="hidden" id="cleanPath" name="cleanPath" value="{{cleanPath}}">
                <input type="hidden" id="past" name="past" value="{{past}}">
                <button type="submit">Create</button>
            </form>
        </span>
    </div>
    <p id="upload-file-name">Not Uploading Anything</p>
	</div>
     <br>
    <div class="dashboard-container" id="dashboard-container">
    	<script>
			var jsonFiles = JSON.parse(<%- JSON.stringify(jsonFiles) %>);
			var url = <%- url %>;
			var dir = document.getElementById("cleanPath");
			console.log(jsonFiles);
			
			function renderDashboard(files) {
				var url = <%- url %>;
				var dir = document.getElementById("cleanPath").value;
			    const dashboardContainer = document.getElementById("dashboard-container"); // Assuming an element with this ID exists for the dashboard 
				while (dashboardContainer.firstChild) {
				    dashboardContainer.removeChild(dashboardContainer.firstChild);
				  }
				 {{ if (!dashboard) }}
				     // Create the new element instead of using a template string
				     	   	  const div = document.createElement('div');
				     	   	  div.classList.add('dashboard-icon');
				     	   	
				     	   	  const a = document.createElement('a');
				     	   	  a.classList.add('hidden-link', 'dashboard-hidden-link');
				     	   	  a.href = `?dir=${document.getElementById("past").value}`;
				     	   	
				     	   	  const img = document.createElement('img');
				     	   	  img.classList.add('folder');
				     	   	  img.src = '/icons/back-small.webp';
				     	   	  img.alt = 'Back';
				     	   	
				     	   	  // Append the image to the anchor tag
				     	   	  a.appendChild(img);
				     	   	
				     	   	  // Set the text content for the directory link (../)
				     	   	  const textNode = document.createTextNode('../');
				     	   	
				     	   	  // Append the anchor and text node to the div
				     	   	  div.appendChild(a);
				     	   	  div.appendChild(textNode);
				     	   	
				     	   	  // Append the div to the dashboard container
				     	   	  dashboardContainer.appendChild(div);
				     	{{ /if }}
			    files.forEach(file => {
			        const fileIcon = document.createElement("div");
			        fileIcon.classList.add("dashboard-icon");
			
			        if (!file.isDirectory) {
			            if (file.openable) {
			                const fileLink = document.createElement("a");
			                fileLink.classList.add("hidden-link", "dashboard-hidden-link");
			                fileLink.href = `/editor/?file=${file.cleanPath}`;
			
			                const fileImage = document.createElement("img");
			                fileImage.classList.add("document");
			                fileImage.src = "/icons/document-small.webp";
			                fileImage.alt = "Document";
			
			                fileLink.appendChild(fileImage);
			                fileIcon.appendChild(fileLink);
			            } else {
			                const span = document.createElement("span");
			                span.classList.add("dashboard-hidden-link");
			
			                const fileImage = document.createElement("img");
			                fileImage.classList.add("document");
			                fileImage.src = `/icons/${file.kind}-small.webp`;
			                fileImage.alt = "Document";
			
			                span.appendChild(fileImage);
			                fileIcon.appendChild(span);
			            }
			        } else {
			            const folderLink = document.createElement("a");
			            folderLink.classList.add("hidden-link", "dashboard-hidden-link");
			            folderLink.href = `?dir=${file.cleanPath}`;
			
			            const folderImage = document.createElement("img");
			            folderImage.classList.add("folder");
			            folderImage.src = "/icons/folder-small.webp";
			            folderImage.alt = "Folder";
			
			            folderLink.appendChild(folderImage);
			            fileIcon.appendChild(folderLink);
			        }
			
			        const removeLink = document.createElement("a");
			        removeLink.classList.add("hidden-link");
			        removeLink.href = `/dashboard/remove/?dir=${file.cleanPath}`;
			
			        const closeButton = document.createElement("button");
			        closeButton.classList.add("dashboard-close");
			        closeButton.textContent = "X";
			        
			        removeLink.appendChild(closeButton);
			        fileIcon.appendChild(removeLink);
			
			        const renameForm = document.createElement("form");
			        renameForm.method = "POST";
			        renameForm.action = "/dashboard/editName";
			        renameForm.classList.add("dashboard-rename-form", "hidden");
			        renameForm.id = file.id;
			
			        const isDirectoryInput = document.createElement("input");
			        isDirectoryInput.type = "hidden";
			        isDirectoryInput.name = "isDirectory";
			        isDirectoryInput.value = file.isDirectory;
			
			        const newNameInput = document.createElement("input");
			        newNameInput.type = "text";
			        newNameInput.name = "newName";
			        newNameInput.value = file.name;
			
			        const pathInput = document.createElement("input");
			        pathInput.type = "hidden";
			        pathInput.name = "path";
			        pathInput.value = file.filePath;
			
			        const cleanPathInput = document.createElement("input");
			        cleanPathInput.type = "hidden";
			        cleanPathInput.name = "cleanPath";
			        cleanPathInput.value = file.cleanPath;
			
			        const renameButton = document.createElement("button");
			        renameButton.type = "submit";
			        renameButton.classList.add("dashboard-rename");
			        renameButton.textContent = "R";
			
			        renameForm.append(isDirectoryInput, newNameInput, pathInput, cleanPathInput, renameButton);
			        fileIcon.appendChild(renameForm);
			
			        dashboardContainer.appendChild(fileIcon);
			    });
			}
			
			renderDashboard(jsonFiles);
    	</script>
    				   <form action="/dashboard/zip-upload?dir={{ cleanPath }}"
                            class="dropzone floating-center background-none" id="my-awesome-dropzone" method="POST"
                            enctype="multipart/form-data">
								<div class="dz-message" data-dz-message><span>Drop your silly files in here!</span></div>
                            </form>
								
<script>
	var uploadFileName = document.getElementById("upload-file-name");
    Dropzone.options.myAwesomeDropzone = {
        paramName: "zipFile", // Match the field name multer is expecting
        webkitRelativePath: true,
        createImageThumbnails: false,
        disablePreviews: true,
        clickable: false,
        method: "post",
        uploadMultiple: true,
        autoProcessQueue: true,
        forceFallback: false,        
        init: function () {
            const dz = this;

            // Listen for the addedfile event
            dz.on("addedfile", function (file) {
                console.log('File added:', file);
                uploadFileName.innerText = `Uploading ${file.name}.`
            });

            // Listen for the complete event
            dz.on("complete", async function () {
                // Create a new zip instance
                const zip = new JSZip();
                const files = dz.getAcceptedFiles();
                // files to zip using relative path if available
                for (const file of files) {
                    const relativePath = file.webkitRelativePath || file.name;
                    zip.file(relativePath, file); // Add file to ZIP
					file.cleanPath = `<%- cleanPath %>/${file.name}`
					var extension = (file.name).split('.').pop();
					console.log(extension);
					const audioExtensions = ['mp3', 'wav', 'aac', 'flac', 'ogg', 'wma'];
					const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'svg', 'tiff'];
					const documentExtensions = ['pdf', 'doc', 'docx', 'ppt', 'pptx', 'txt', 'xls', 'xlsx'];
					const codeExtensions = ['js', 'html', 'css', 'py', 'java', 'c', 'cpp', 'rb', 'go', 'php'];
					                     if (audioExtensions.includes(extension)) {
					                         file.kind = 'audio';
					                     } else if (imageExtensions.includes(extension)) {
					                         file.kind = 'image';
					                     } else if (documentExtensions.includes(extension)) {
					                         file.kind = 'document';
					                     } else if (codeExtensions.includes(extension)) {
					                         file.kind = 'code';
					                     } else {
					                         file.kind = 'unknown';
					}                 
                    jsonFiles = jsonFiles.concat(file); // Assuming `result.newFiles` is an array of new files
                }

                try {
                    // Generate zip blob
                    const zipBlob = await zip.generateAsync({ type: "blob" });

                    // Log for debugging purposes
                    console.log('Generated zipBlob:', zipBlob);

                    // Prepare FormData
                    const formData = new FormData();
                    formData.append('zipFile', new File([zipBlob], 'folder.zip'));

                    // Send the zip file to the server
                    const response = await fetch('/dashboard/zip-upload?dir='+document.getElementById('cleanPath').value, {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.text();
                    console.log(result);
                    uploadFileName.innerText = `File Uploaded Successfully, ${this.getQueuedFiles().length} to go.`
                } catch (error) {
                	uploadFileName.innerText = "Error uploading files :P"
                    console.error('Error generating or uploading zip:', error);
                }
                if (this.getQueuedFiles().length === 0 && this.getUploadingFiles().length === 0) {
                   	console.log("done");
                   	renderDashboard(jsonFiles);
                }
            });

            // Start processing the queue when user selects files
            dz.on("queuecomplete", function() {
                dz.processQueue(); // Automatically start the queue
            });
		}
    };
</script>
    </div>
    <%- include("./footer") %>
